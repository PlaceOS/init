#! /usr/bin/env bash
set -e

# Colours
red='\033[0;31m'
green='\033[0;32m'
reset='\033[0m'

influx_key_env=".env.influxdb"
chronograf_token_secret=".env.chronograf"
secret_key_env=".env.secret_key"
public_key_env=".env.public_key"
instance_telemetry_key_env=".env.instance_telemetry_key"
env=".env"

set -a
if [[ -f "${influx_key_env}" ]]; then
  . ${influx_key_env}
fi
if [[ -f "${chronograf_token_secret}" ]]; then
    . ${chronograf_token_secret}
fi
if [[ -f "${secret_key_env}" ]]; then
  . ${secret_key_env}
fi
if [[ -f "${public_key_env}" ]]; then
  . ${public_key_env}
fi
if [[ -f "${instance_telemetry_key_env}" ]]; then
  . ${instance_telemetry_key_env}
fi

. ${env}
set +a

if [[ -z "${TOKEN_SECRET}" ]]; then
  TOKEN_SECRET=$(openssl rand -base64 256 | tr -d '\n')

  # Write the new secret to an env file
  echo "TOKEN_SECRET=${TOKEN_SECRET}" > "$chronograf_token_secret"
  echo "generated Chrongraf TOKEN_SECRET"
else
  echo "already generated Chrongraf TOKEN_SECRET"
fi

if [[ -z "${INFLUX_API_KEY}" || -z "${INFLUXDB_TOKEN}" ]]; then
  INFLUX_API_KEY=$(openssl rand -base64 24)
  # Write the API keys to an env file
  echo "INFLUX_API_KEY=${INFLUX_API_KEY}" > "$influx_key_env"   # for Source
  echo "INFLUXDB_TOKEN=${INFLUX_API_KEY}" >> "$influx_key_env"  # for Chronograf
  echo "generated INFLUX_API_KEY, INFLUXDB_TOKEN"
else
  echo "already generated INFLUX_API_KEY, INFLUXDB_TOKEN"
fi

if [[ -z "${PLACE_SERVER_SECRET}" || -z "${JWT_PUBLIC}" || -z "${JWT_SECRET}" ]]; then
  dir=$(mktemp -d)

  if [[ -n "${PLACE_SERVER_SECRET}"  ]]; then
      echo -e "${red}ERROR${reset}: the ${secret_key_env} file contains an existing secret."
      echo "Please update the file should look like the following..."
      echo "JWT_SECRET=<existing-instance-secret>"
      echo "SECRET_KEY_BASE=<existing-instance-secret>"
      echo "PLACE_SERVER_SECRET=<existing-instance-secret>"
      echo "SERVER_SECRET=<existing-instance-secret>"
      exit 1
  elif [[ -n "${JWT_SECRET}" && -z "${PLACE_SERVER_SECRET}" ]]; then
      echo -e "${red}ERROR${reset}: this instance has previously been initialised with a default secret."
      echo -e "See the ${green}server:rotate_server_secret${reset} task here https://github.com/PlaceOS/init#scripts"
      echo "Please contact support@place.technology if you need help."
      exit 1
  fi


  ssh-keygen -t rsa -b 4096 -m PEM -f "${dir}/secret" -N "" &>/dev/null
  openssl rsa -in "${dir}/secret" -pubout -outform PEM -out "${dir}/public" 0>&- &>/dev/null

  secret="$(base64 -w 0 -i "${dir}/secret")"

  # JWT secret
  jwt_secret_env_key="JWT_SECRET=${secret}"

  # Used in Rails
  secret_key_base_env_key="SECRET_KEY_BASE=${secret}"

  # Used in PlaceOS
  place_server_secret_env_key="PLACE_SERVER_SECRET=${secret}"
  server_secret_env_key="SERVER_SECRET=${secret}"

  echo ${jwt_secret_env_key} >$secret_key_env
  echo ${secret_key_base_env_key} >>$secret_key_env
  echo ${server_secret_env_key} >>$secret_key_env
  echo ${place_server_secret_env_key} >>$secret_key_env

  public_env_key="JWT_PUBLIC=$(base64 -w 0 -i "${dir}/public")"
  echo $public_env_key >$public_key_env

  echo "generated PLACE_SERVER_SECRET, JWT_SECRET and JWT_PUBLIC"

  rm -r "${dir}"
else
  echo "already generated PLACE_SERVER_SECRET, JWT_SECRET and JWT_PUBLIC"
fi

if [[ ! -f .htpasswd-kibana ]]; then
  echo "$PLACE_PASSWORD" | htpasswd -B -c .htpasswd-kibana $PLACE_EMAIL
  echo "generated kibana basic auth"
else
  echo "already generated kibana basic auth"
fi

if [[ -z "${PLACE_INSTANCE_TELEMETRY_KEY}" ]]; then
  PLACE_INSTANCE_TELEMETRY_KEY="$(LOG_LEVEL=none task create:instance_key)"
  echo "PLACE_INSTANCE_TELEMETRY_KEY=${PLACE_INSTANCE_TELEMETRY_KEY}" >"$instance_telemetry_key_env"
  echo "generated PLACE_INSTANCE_TELEMETRY_KEY"
else
  echo "already generated PLACE_INSTANCE_TELEMETRY_KEY"
fi
